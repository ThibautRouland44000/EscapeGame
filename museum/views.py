# museum/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.views.decorators.http import require_http_methods
from django.urls import reverse
from game.models import Team, Player, TeamCode 
from game.views import PUZZLES 
from comms.models import Message
import random 

def _player(request, team):
    pid = request.session.get("player_id")
    return Player.objects.filter(id=pid, team=team).first()

def _stable_shuffle(seq, seed):
    rng = random.Random(seed)
    items = list(seq)
    rng.shuffle(items)
    return items


# --- DATASET FIXE (6 ≈ìuvres : peintures + David) ---
ARTWORKS = [
    {"slug": "joconde",        "title": "La Joconde (Leonardo da Vinci)",               "img": "museum/joconde.png"},
    {"slug": "nuit-etoilee",   "title": "La Nuit √©toil√©e (Vincent van Gogh)",           "img": "museum/nuit-etoilee.png"},
    {"slug": "david",          "title": "David (Michel-Ange)",                           "img": "museum/david.png"},
    {"slug": "vague-kanagawa", "title": "La Grande Vague de Kanagawa (Hokusai)",        "img": "museum/vague-kanagawa.png"},
    {"slug": "montres-molles", "title": "La Persistance de la m√©moire (Salvador Dal√≠)", "img": "museum/montres-molles.png"},
    {"slug": "fille-perle",    "title": "La Jeune Fille √† la perle (Johannes Vermeer)", "img": "museum/fille-perle.png"},
]

EMOJI_SETS = {
    "A": ["üôÇ", "üîç", "üñºÔ∏è"],   # Joconde ‚Äî sourire √©nigmatique / chef-d‚Äô≈ìuvre
    "B": ["üåå", "‚ú®", "üåô"],   # Nuit √©toil√©e ‚Äî ciel nocturne
    "C": ["üóø", "üí™", "ü™®"],   # David ‚Äî statue / force / marbre
    "D": ["üåä", "‚õµ", "üóª"],   # Grande Vague ‚Äî vague / bateaux / Fuji
    "E": ["üï∞Ô∏è", "ü´†", "üñºÔ∏è"],  # Montres molles ‚Äî horloges qui fondent
    "F": ["üëß", "üíé", "üßï"],   # Fille √† la perle ‚Äî portrait / perle / turban
}

EXPECTED = {
    "A": "joconde",
    "B": "nuit-etoilee",
    "C": "david",
    "D": "vague-kanagawa",
    "E": "montres-molles",
    "F": "fille-perle",
}

ARTWORKS = [
    {"slug": "joconde",        "title": "La Joconde (Leonardo da Vinci)",               "img": "museum/joconde.png",        "img_full": "museum/full/joconde.png"},
    {"slug": "nuit-etoilee",   "title": "La Nuit √©toil√©e (Vincent van Gogh)",           "img": "museum/nuit-etoilee.png",    "img_full": "museum/full/nuit-etoilee.png"},
    {"slug": "david",          "title": "David (Michel-Ange)",                           "img": "museum/david.png",           "img_full": "museum/full/david.png"},
    {"slug": "vague-kanagawa", "title": "La Grande Vague de Kanagawa (Hokusai)",        "img": "museum/vague-kanagawa.png",  "img_full": "museum/full/vague-kanagawa.png"},
    {"slug": "montres-molles", "title": "La Persistance de la m√©moire (Salvador Dal√≠)", "img": "museum/montres-molles.png",  "img_full": "museum/full/montres-molles.png"},
    {"slug": "fille-perle",    "title": "La Jeune Fille √† la perle (Johannes Vermeer)", "img": "museum/fille-perle.png",     "img_full": "museum/full/fille-perle.png"},
]

# Fiches p√©dagogiques (slug ‚Üí infos)
ART_INFO = {
    "joconde": {
        "title": "La Joconde",
        "artist": "Leonardo da Vinci",
        "year": "c. 1503‚Äì1506",
        "country": "Italie",
        "note": "Portrait c√©l√®bre pour son sourire ‚Äò√©nigmatique‚Äô et l‚Äôusage du sfumato (d√©grad√©s doux)."
    },
    "nuit-etoilee": {
        "title": "La Nuit √©toil√©e",
        "artist": "Vincent van Gogh",
        "year": "1889",
        "country": "Pays-Bas / France (Saint-R√©my)",
        "note": "Ciel tourbillonnant, couleurs intenses : une vision √©motionnelle plus que r√©aliste."
    },
    "david": {
        "title": "David",
        "artist": "Michel-Ange",
        "year": "1501‚Äì1504",
        "country": "Italie",
        "note": "Sculpture en marbre de la Renaissance : id√©al du corps humain et ma√Ætrise anatomique."
    },
    "vague-kanagawa": {
        "title": "La Grande Vague de Kanagawa",
        "artist": "Katsushika Hokusai",
        "year": "c. 1831",
        "country": "Japon",
        "note": "Estampe ukiyo-e : composition dynamique et perspective influen√ßant l‚Äôart en Europe."
    },
    "montres-molles": {
        "title": "La Persistance de la m√©moire",
        "artist": "Salvador Dal√≠",
        "year": "1931",
        "country": "Espagne / France",
        "note": "Montres ‚Äòmolles‚Äô : le temps devient subjectif, th√®me central du surr√©alisme."
    },
    "fille-perle": {
        "title": "La Jeune Fille √† la perle",
        "artist": "Johannes Vermeer",
        "year": "c. 1665",
        "country": "Pays-Bas",
        "note": "‚ÄòTronie‚Äô (√©tude de visage) : lumi√®re douce et perle iconique sur fond sombre."
    },
}

@require_http_methods(["GET","POST"])
def museum_puzzle(request, team_uuid):
    team = get_object_or_404(Team, uuid=team_uuid)
    player = _player(request, team)
    if not player:
        return redirect("start")

    feedback = None
    success = False  # flag pour l‚Äôoverlay

    if request.method == "POST" and player.role == "B":
        # B envoie un mapping pour A..F ‚Üí slug d‚Äô≈ìuvre
        answers = {
            key: (request.POST.get(f"map_{key}") or "").strip()
            for key in EMOJI_SETS.keys()
        }
        # check complet
        if any(not v for v in answers.values()):
            feedback = "Il manque des associations, compl√®te tout üôÇ"
        else:
            if answers == EXPECTED:
                success = True
                # Progression + lettre (ex: ‚ÄúO‚Äù)
                team.current_order += 1
                if "O" not in (team.letters or ""):
                    team.letters += "O"
                team.save(update_fields=["current_order","letters"])

                # enregistrer le code gagn√© pour ce puzzle
                MUSEUM_CODE = next(p["code"] for p in PUZZLES if p["slug"] == "museum")
                TeamCode.objects.get_or_create(
                    team=team, puzzle_slug="museum",
                    defaults={"code": MUSEUM_CODE}
                )
                Message.objects.create(team=team, player=None, text=f"üéâ √âpreuve du Mus√©e r√©ussie ! üîê Code obtenu : {MUSEUM_CODE}") 

                # Message ‚ÄúSyst√®me‚Äù dans le chat visible par les 2 joueurs
                Message.objects.create(team=team, player=None,
                                       text="üéâ √âpreuve du Mus√©e r√©ussie !")

                # Pas de redirect imm√©diat : l‚Äôoverlay s‚Äôaffiche dans le template
            else:
                team.score = max(0, team.score - 1)
                team.save(update_fields=["score"])
                feedback = "Ce n‚Äôest pas la bonne association. Discutez au chat et r√©essayez !"

        # ======= ORDRES D√âTERMINISTES PAR √âQUIPE =======
    # M√©lange l'ordre des ≈ìuvres (images) et des paquets d'emojis
    art_order = _stable_shuffle(list(range(len(ARTWORKS))), f"{team.uuid}-ART")
    emo_order = _stable_shuffle(list(EMOJI_SETS.keys()), f"{team.uuid}-EMO")

    # Construit une liste d'≈ìuvres anonymis√©es pour l'affichage
    # -> label = "≈íuvre 1..6" dans l'ordre m√©lang√©
    artworks_display = []
    for i, art_idx in enumerate(art_order):
        art = ARTWORKS[art_idx]
        artworks_display.append({
            "slug": art["slug"],
            "img":  art["img"],
            "label": f"≈íuvre {i+1}",
        })

    # Construit la liste des paquets d'emojis dans un ordre m√©lang√©
    emoji_list = [{"key": k, "emojis": EMOJI_SETS[k]} for k in emo_order]

    # ======= CONTEXTE SELON R√îLE =======
    next_ok = reverse("museum_debrief", args=[team.uuid])  # ‚Üê destination apr√®s succ√®s

    base_ctx = {
        "team": team,
        "player": player,
        "feedback": feedback,
        "success": success,
        "next_url": next_ok,
        "artworks": artworks_display,
    }

    if player.role == "A":
        ctx = {**base_ctx, "role": "A", "emoji_list": None}
    else:
        ctx = {**base_ctx, "role": "B", "emoji_list": emoji_list}

    return render(request, "museum/puzzle.html", ctx)


def museum_debrief(request, team_uuid):
    team = get_object_or_404(Team, uuid=team_uuid)
    player = _player(request, team)
    if not player:
        return redirect("start")
    
    items = []
    for art in ARTWORKS:
        slug = art["slug"]
        info = ART_INFO[slug]
        items.append({
            "img_full": art.get("img_full", art["img"]),
            "title": info["title"],
            "artist": info["artist"],
            "year": info["year"],
            "country": info["country"],
            "note": info["note"],
        })

    return render(request, "museum/debrief.html", {
        "team": team,
        "player": player,
        "items": items,
    })




