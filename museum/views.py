from django.shortcuts import render, redirect, get_object_or_404
from django.views.decorators.http import require_http_methods
from game.models import Team, Player

def _player(request, team):
    pid = request.session.get("player_id")
    return Player.objects.filter(id=pid, team=team).first()

# --- DATASET FIXE (toujours les m√™mes) ---
# 6 ≈ìuvres (slug, titre, fichier image dans static/museum/)
ARTWORKS = [
    {"slug": "joconde", "title": "La Joconde (Leonardo da Vinci)", "img": "museum/joconde.png"},
    {"slug": "nuit-etoilee", "title": "La Nuit √©toil√©e (Van Gogh)", "img": "museum/nuit-etoilee.png"},
    {"slug": "david", "title": "David (Michel-Ange)", "img": "museum/david.png"},
    {"slug": "vague-kanagawa", "title": "La Grande Vague de Kanagawa (Hokusai)", "img": "museum/vague-kanagawa.png"},
    {"slug": "montres-molles", "title": "La Persistance de la m√©moire (Dal√≠)", "img": "museum/montres-molles.png"},
    {"slug": "fille-perle", "title": "La Jeune Fille √† la perle (Vermeer)", "img": "museum/fille-perle.png"},
]
# 6 listes d‚Äôemojis (toujours les m√™mes) ‚Üí √† associer aux ≈ìuvres
# Cl√©s A..F pour l‚Äôinterface c√¥t√© B
EMOJI_SETS = {
    "A": ["üôÇ", "üîç", "üñºÔ∏è"],          # Joconde ‚Äî sourire √©nigmatique / chef-d‚Äô≈ìuvre
    "B": ["üåå", "‚ú®", "üåô"],          # Nuit √©toil√©e ‚Äî ciel nocturne
    "C": ["üóø", "üí™", "ü™®"],          # David ‚Äî statue / force / marbre
    "D": ["üåä", "‚õµ", "üóª"],          # Grande Vague ‚Äî vague/bateaux/Fuji
    "E": ["üï∞Ô∏è", "ü´†", "üñºÔ∏è"],          # Montres molles ‚Äî horloges qui fondent
    "F": ["üëß", "üíé", "üßï"],          # Fille √† la perle ‚Äî portrait/turban/boucle
}
# Mapping attendu EMO set -> slug ≈ìuvre
EXPECTED = {
    "A": "joconde",
    "B": "nuit-etoilee",
    "C": "david",
    "D": "vague-kanagawa",
    "E": "montres-molles",
    "F": "fille-perle",
}

@require_http_methods(["GET","POST"])
def museum_puzzle(request, team_uuid):
    team = get_object_or_404(Team, uuid=team_uuid)
    player = _player(request, team)
    if not player:
        return redirect("start")

    feedback = None
    ok = False

    if request.method == "POST" and player.role == "B":
        # B envoie un mapping pour A..F ‚Üí slug d‚Äô≈ìuvre
        answers = {
            key: (request.POST.get(f"map_{key}") or "").strip()
            for key in EMOJI_SETS.keys()
        }
        # check complet
        if any(not v for v in answers.values()):
            feedback = "Il manque des associations, compl√®te tout üôÇ"
        else:
            if answers == EXPECTED:
                ok = True
                # Avance la partie si tu veux cha√Æner les √©preuves
                team.current_order += 1
                # Optionnel: ajouter une lettre ‚ÄúO‚Äù √† ‚ÄúOUVRE‚Äù par exemple
                if "O" not in (team.letters or ""):
                    team.letters += "O"
                team.save(update_fields=["current_order","letters"])
                return redirect("lobby", team_uuid=team.uuid)
            else:
                team.score = max(0, team.score - 1)
                team.save(update_fields=["score"])
                feedback = "Ce n‚Äôest pas la bonne association. Discutez au chat et r√©essayez !"

    # Pr√©pare l‚Äôaffichage selon r√¥le
    if player.role == "A":
        context = {
            "role": "A",
            "artworks": ARTWORKS,  # A voit les 6 images (num√©rot√©es 1..6 visuellement)
            "emoji_sets": None,
            "feedback": feedback,
            "team": team,
            "player": player,
        }
    else:  # role B
        # B voit les 6 paquets d‚Äôemojis avec des select d‚Äô≈ìuvre
        context = {
            "role": "B",
            "artworks": ARTWORKS,   # pour les options de select (titres)
            "emoji_sets": EMOJI_SETS,
            "feedback": feedback,
            "team": team,
            "player": player,
        }
    return render(request, "museum/puzzle.html", context)
